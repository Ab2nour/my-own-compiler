# On teste automatiquement
# le code ANTLR4.

name: CI
on:  push
jobs:
  test-code:
    name: Teste Calculette.g4
    runs-on: ubuntu-latest
    steps:    
    - uses: actions/checkout@v2
    
    - name: Test d'expressions simples
      run: |
            cd .
            
            # ---------------- Fonctions ----------------
            function initialisation () {
                export CLASSPATH=.:tools/antlr-4.9.2-complete.jar:tools/mvap/MVaP.jar:$CLASSPATH
                
                cd tools/mvap
                jar cfm MVaP.jar META-INF/MANIFEST.MF *.class
                cd ../..
            }
            
            function antlr4 () {
                java -Xmx500M -cp "tools/antlr-4.9.2-complete.jar:$CLASSPATH" org.antlr.v4.Tool $@
            }

            function grun () {
                java -Xmx500M -cp "tools/antlr-4.9.2-complete.jar:$CLASSPATH" org.antlr.v4.gui.TestRig $@
            }

            function compileMVAP () {
                java -cp $CLASSPATH MVaPAssembler $@
            }

            function execMVAP () {
                java -jar tools/mvap/MVaP.jar $@
            }
            
            
            function mvap () {
                cd .
                
                initialisation
                
                antlr4 Calculette.g4                
                javac *.java
                
                expr="$1"
                
                echo "$expr" | grun Calculette 'start' > fichier.mvap
                
                compileMVAP fichier.mvap
                
                execMVAP fichier.mvap.cbap
            }
            
            function test () {
                ### Cette fonction teste une expression
                # D'abord l'expression
                # Puis la valeur attendue
                
                ((nb_tests++))
                
                expr=$1
                resultat_attendu=$2
                
                resultat=$(mvap "$expr" | xargs) # xargs trims whitespace
                
                if [ "$resultat" = "$resultat_attendu" ]
                then
                echo "✅ $expr = $resultat"
                else
                echo "❌ $expr = $resultat   (!= $resultat_attendu)"                
                ((nb_tests_faux++))
                fi
            }
            
            # ---------------- Code ----------------            
            nb_tests=0
            nb_tests_faux=0
            
            test '3 + 5' '8'
            test "3 * 5" '15'
            test '3 * 5' '15'
            test '3*5' '15'
            test '3 - 5' '-2'
            test '6 / 3' '2'



            test '3+5' '8'
            test '6 + 2' '8'
            test '3 + 5' '8'
            test '3 + 5' '8'
            test '3*5' '15'
            test '6*2' '12'
            test '3 * 5' '15'
            
            
            echo "🤵 $nb_tests_faux tests ont été effectués."  
            echo
            echo "✅ Il y a $(( nb_tests - nb_tests_faux )) tests passés avec succès."  


            if [ "nb_tests_faux" > "0" ]
            then
            echo "❌ Il y a $nb_tests_faux tests faux."  
            exit 42
            fi
            
      shell: bash
